definitions:
  auth_models.LoginRequest:
    properties:
      email:
        example: user@gmail.com
        type: string
      password:
        example: password
        type: string
    type: object
  auth_models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  helpers.ApiResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  helpers.ApiResponseAuthorization:
    properties:
      data: {}
      message:
        type: string
      token:
        type: string
    type: object
  request_models.BookBorrowedRequest:
    properties:
      book_id:
        type: integer
      borrowed_date:
        type: string
      return_date:
        type: string
      user_id:
        type: integer
    type: object
  request_models.BookByGenreId:
    properties:
      genre_id:
        type: integer
    type: object
  request_models.BookById:
    properties:
      book_id:
        type: integer
    type: object
  request_models.BookByTitle:
    properties:
      title:
        type: string
    type: object
  request_models.BookUpdate:
    properties:
      author:
        type: string
      book_id:
        type: integer
      cover:
        type: string
      genre:
        type: string
      genre_id:
        type: integer
      quantity:
        type: integer
      title:
        type: string
    type: object
  request_models.FavoriteBookRequest:
    properties:
      book_id:
        type: integer
      user_id:
        type: integer
    type: object
  request_models.ProfileUpdate:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  request_models.RequestOtpEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request_models.UpdatePasswordRequest:
    properties:
      password:
        type: string
    type: object
  request_models.VerificationOtpEmail:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
info:
  contact: {}
paths:
  /book/add-book:
    post:
      consumes:
      - multipart/form-data
      description: used by librarians to add books
      parameters:
      - description: Title Book
        in: formData
        name: title
        required: true
        type: string
      - description: Author Book
        in: formData
        name: author
        required: true
        type: string
      - description: Isbn Book
        in: formData
        name: isbn
        required: true
        type: string
      - description: Cover Book
        in: formData
        name: cover
        required: true
        type: file
      - description: Genre ID
        in: formData
        name: genreID
        required: true
        type: integer
      - description: Publication Year
        in: formData
        name: publicationYear
        required: true
        type: integer
      - description: Quantity
        in: formData
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Add Book
      tags:
      - Books
  /book/add-favorite-book:
    post:
      consumes:
      - application/json
      description: Added Favorite book. JWT token is required if you want to use it
      parameters:
      - description: Data ID User and Book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.FavoriteBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Add Favorite Book
      tags:
      - Books
  /book/book-borrowing-data:
    get:
      description: Getting data borrowing books. JWT token is required if you want
        to use it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Book Borrowing Data
      tags:
      - Books
  /book/borrowed-book:
    post:
      consumes:
      - application/json
      description: Borrowed Book. JWT token is required if you want to use it
      parameters:
      - description: Data Borrowed
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.BookBorrowedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Borrowed Books
      tags:
      - Books
  /book/category-books:
    get:
      consumes:
      - application/json
      description: Getting Books By CategoryID. JWT token is required if you want
        to use it
      parameters:
      - description: Category ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.BookByGenreId'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Get Books Category
      tags:
      - Books
  /book/delete-book:
    delete:
      consumes:
      - application/json
      description: select one of the data books to update
      parameters:
      - description: data update book
        in: body
        name: request
        schema:
          $ref: '#/definitions/request_models.BookUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Update data Book
      tags:
      - Books
  /book/delete-favorite-book:
    delete:
      consumes:
      - application/json
      description: Used to select one favorite book to delete. JWT token is required
        if you want to use it
      parameters:
      - description: Data ID User and Book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.FavoriteBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Delete Favorite Book
      tags:
      - Books
  /book/get-books:
    get:
      description: Getting data book. JWT token is required if you want to use it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: GetBook
      tags:
      - Books
  /book/get-favorite-book:
    get:
      description: Getting Data favorite books. JWT token is required if you want
        to use it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Get Favorite Books
      tags:
      - Books
  /book/search-book:
    get:
      consumes:
      - application/json
      description: Searching books by title book. JWT token is required if you want
        to use it
      parameters:
      - description: Title Book
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.BookByTitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Searching Books
      tags:
      - Books
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password (only email gmail make used)
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponseAuthorization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      summary: Login user
      tags:
      - Auth
  /logout:
    post:
      description: User Must first log in for used feature Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /otp/send-otp:
    post:
      consumes:
      - application/json
      description: Send otp to email
      parameters:
      - description: User Email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.RequestOtpEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      summary: Otp Email
      tags:
      - Otp
  /otp/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify otp email
      parameters:
      - description: User Email and Otp
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request_models.VerificationOtpEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      summary: Verify Otp
      tags:
      - Otp
  /profile:
    get:
      description: view data user example username, email and role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: GetProfile user
      tags:
      - Profile
  /profile/photo-profile:
    put:
      consumes:
      - multipart/form-data
      description: Used for update photo profile.
      parameters:
      - description: Photo profile
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Update Photo Profile User
      tags:
      - Profile
  /profile/update-profile:
    put:
      consumes:
      - application/json
      description: Used for update profile example username or email.
      parameters:
      - description: Update Profile
        in: body
        name: request
        schema:
          $ref: '#/definitions/request_models.ProfileUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: Update Profile user
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Register with username, email, password (only email gmail make
        used)
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth_models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      summary: Register user
      tags:
      - Auth
  /update-password:
    put:
      consumes:
      - application/json
      description: Used for user which want for update password
      parameters:
      - description: Update Password Request
        in: body
        name: request
        schema:
          $ref: '#/definitions/request_models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helpers.ApiResponse'
      security:
      - BearerAuth: []
      summary: UpdatePassword user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
